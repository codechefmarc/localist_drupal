<?php

/**
 * @file
 * Primary module hooks for Localist module.
 */

use Drupal\Core\Routing\RouteMatchInterface;
use Drupal\Core\Url;
use Drupal\migrate\Plugin\MigrationInterface;

/**
 * Implements hook_help().
 */
function localist_drupal_help($route_name, RouteMatchInterface $route_match) {
  switch ($route_name) {
    // Main module help for the block module.
    case 'help.page.localist_drupal':
      $variables = [
        ':settings' => Url::fromRoute('localist_drupal.settings')->toString(),
      ];

      $output = '';
      $output .= '<h3>' . t('About') . '</h3>';
      $output .= '<p>' . t('Utilizes Drupal migrations to import events, groups, and taxonomy terms into Drupal. The module provides custom migration plugins and functions to aid with importing data from the Localist API. It also provides a basic group migration with an associated taxonomy vocabulary called Localist Groups. More information can be found in README.md.') . '</p>';
      $output .= '<h3>' . t('Usage') . '</h3>';
      $output .= '<ol>';
      $output .= '<li>' . t('<a href=":settings">Visit the Localist settings page</a> to get started.', $variables) . '</li>';
      $output .= '<li>' . t('To start syncing, first check the box next to Enable Localist sync.') . '</li>';
      $output .= '<li>' . t('Enter in the Localist endpoint base URL for your organization. You can get this from visiting your Localist home page or by asking your Localist rep.') . '</li>';
      $output .= '<li>' . t('Click Save Configuration at the bottom.') . '</li>';
      $output .= '<li>' . t('Once the form refreshes, check the new Status section at the top. If the endpoint works, a green checkmark will appear next to Localist Endpoint.') . '</li>';
      $output .= '</ol>';

      return $output;

  }
}

/**
 * Implements hook_theme().
 */
function localist_drupal_theme($existing, $type, $theme, $path) {
  return [
    'localist_status' => [
      'variables' => [
        'endpoint_status' => NULL,
        'group_migration_status' => [],
        'group_taxonomy_status' => NULL,
        'group_selected' => NULL,
        'svg_check' => NULL,
        'svg_xmark' => NULL,
      ],
    ],
  ];
}

/**
 * Returns dynamic URLs for Localist event migrations.
 *
 * @see migrations/localist_events.yml
 */
function localist_drupal_migrate_url(MigrationInterface $migration) {
  $endpointType = $migration->getPluginDefinition()['source']['localist_endpoint'] ?? 'events';
  $localistManager = \Drupal::service('localist_drupal.manager');

  $endpointURLs = $localistManager->getEndpointUrls($endpointType);

  return $endpointURLs;
}

/**
 * Implements hook_cron().
 */
function localist_drupal_cron() {
  $config = \Drupal::config('localist_drupal.settings');
  if ($config->get('enable_localist_sync')) {

    $state = \Drupal::state();

    $next_execution_time = $state->get("localist_migrations", 0);
    $current_time = \Drupal::time()->getRequestTime();
    if ($current_time > $next_execution_time) {
      $state->set("localist_migrations", $current_time + 3600);
      $localistManager = \Drupal::service('localist_drupal.manager');
      $localistManager->runAllMigrations();
    }
  }
}

/**
 * Implements hook_form_FORM_ID_alter().
 */
function localist_drupal_form_alter(&$form, &$form_state, $form_id) {
  // Disables fields that are imported from Localist.
  $formsToCheck = [
    'node_event_form',
    'node_event_edit_form',
    'node_event_quick_node_clone_form',
  ];

  if (in_array($form_id, $formsToCheck)) {
    $fieldsToDisable = [
      'field_localist_id',
      'field_event_status',
      'field_localist_event_url',
      'field_localist_event_image_url',
      'field_localist_event_image_alt',
      'field_localist_ics_url',
      'field_localist_register_enabled',
    ];
    foreach ($fieldsToDisable as $field) {
      $form[$field]['#disabled'] = TRUE;
    }
  }
}

/**
 * Implements hook_preprocess_node().
 */
function localist_drupal_preprocess_node(&$variables) {

  // Processed event fields for other view modes.
  if ($variables['node']->getType() == 'event' && $variables['view_mode'] != 'full') {
    $node = $variables['node'];
    $eventFieldData = \Drupal::service('localist_drupal.meta_fields_manager')->getEventData($node);

    /* These fields are dynamically calculated. Other fields
     * can be referenced in the regular way with content.field_name
     */
    $variables['event_dates'] = $eventFieldData['dates'];
    $variables['ics_url'] = $eventFieldData['ics'];
    $variables['localist_image_url'] = $eventFieldData['localist_image_url'];
    $variables['ticket_cost'] = $eventFieldData['ticket_cost'];
    $variables['ticket_url'] = $eventFieldData['ticket_url'];
    $variables['has_register'] = $eventFieldData['has_register'];
    $variables['cost_button_text'] = $eventFieldData['cost_button_text'];
    $variables['localist_url'] = $eventFieldData['localist_url'];
  }
}

<?php

/**
 * @file
 * Primary module hooks for Localist module.
 */

use Drupal\Core\Routing\RouteMatchInterface;
use Drupal\Core\Url;
use Drupal\migrate\Plugin\MigrationInterface;

/**
 * Implements hook_help().
 */
function localist_drupal_help($route_name, RouteMatchInterface $route_match) {
  switch ($route_name) {
    // Main module help for the block module.
    case 'help.page.localist_drupal':
      $variables = [
        ':settings' => Url::fromRoute('localist_drupal.settings')->toString(),
      ];

      $output = '';
      $output .= '<h3>' . t('About') . '</h3>';
      $output .= '<p>' . t('This module utilizes Drupal migrations to import events, groups, and taxonomy terms into Drupal. It provides custom migration plugins and functions to aid with importing data from the Localist API. It also provides a basic group migration with an associated taxonomy vocabulary called Localist Groups. More information can be found in README.md.') . '</p>';
      $output .= '<h3>' . t('Initial Setup') . '</h3>';
      $output .= '<ol>';
      $output .= '<li>' . t('<a href=":settings">Visit the Localist settings page</a> to get started.', $variables) . '</li>';
      $output .= '<li>' . t('To start syncing, first check the box next to Enable Localist sync.') . '</li>';
      $output .= '<li>' . t('Enter in the Localist endpoint base URL for your organization. You can get this from visiting your Localist home page or by asking your Localist representative.') . '</li>';
      $output .= '<li>' . t('Click Save Configuration at the bottom.') . '</li>';
      $output .= '<li>' . t('Once the form refreshes, check the Preflight Check section at the top. If the endpoint works, a green checkmark will appear next to Localist Endpoint.') . '</li>';
      $output .= '<li>' . t('Click "Create Groups" to create the group taxonomy terms. Groups will synchronize from Localist and be added to the <code>localist_groups</code> taxonomy vocabulary.') . '</li>';
      $output .= '<li>' . t('Once the groups have been created, select a group in the autocomplete for "Group to Sync Events". This module will only synchronize events from the selected group.') . '</li>';
      $output .= '<li>' . t('At this point, all Preflight Checks should be green and the module is set up for accepting custom migrations. No events will be synchronized until an Event Migration is specified.') . '</li>';
      $output .= '<li>' . t('An optional example migration can be added by opening the "Example Migration" details and clicking on "Create Example".') . '</li>';
      $output .= '</ol>';
      $output .= '<h3>' . t('Creating Custom Migrations') . '</h3>';
      $output .= '<ol>';
      $output .= '<li>' . t('Please visit the README.md file in the root of the module to learn how to create custom migrations for this module.') . '</li>';
      $output .= '</ol>';

      return $output;

    case 'localist_drupal.settings':
      $output = '';
      $output .= 'This module is intended to provide migration plugins as well as a starting place to work with the Localist API to import events. An optional working example is provided. For more information about how to create custom migrations for Localist, visit the README.md file in the module root.</p>';

      return $output;
  }
}

/**
 * Implements hook_theme().
 */
function localist_drupal_theme($existing, $type, $theme, $path) {
  return [
    'localist_status' => [
      'variables' => [
        'endpoint_status' => NULL,
        'group_migration_status' => [],
        'group_taxonomy_status' => NULL,
        'group_selected' => NULL,
        'svg_check' => NULL,
        'svg_xmark' => NULL,
      ],
    ],
    'localist_example' => [
      'variables' => [
        'create_example_url' => NULL,
        'examples_created' => NULL,
      ]
    ]
  ];
}

/**
 * Returns dynamic URLs for Localist event migrations.
 *
 * @see migrations/localist_events.yml
 */
function localist_drupal_migrate_url(MigrationInterface $migration) {
  $endpointType = $migration->getPluginDefinition()['source']['localist_endpoint'] ?? 'events';
  $localistManager = \Drupal::service('localist_drupal.manager');

  $endpointURLs = $localistManager->getEndpointUrls($endpointType);

  return $endpointURLs;
}

/**
 * Implements hook_cron().
 */
function localist_drupal_cron() {
  $config = \Drupal::config('localist_drupal.settings');
  if ($config->get('enable_localist_sync')) {
    $localistManager = \Drupal::service('localist_drupal.manager');
    if ($localistManager->preflightChecks()) {
      $state = \Drupal::state();
      $next_execution_time = $state->get("localist_migrations", 0);
      $current_time = \Drupal::time()->getRequestTime();
      if ($current_time > $next_execution_time) {
        $state->set("localist_migrations", $current_time + 3600);
        $localistManager->runAllMigrations();
      }
    }
  }
}
